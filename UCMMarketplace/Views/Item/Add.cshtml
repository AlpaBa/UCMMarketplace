@model UCMMarketplace.Models.item

@{
    ViewBag.Title = "Add";
}

<h2>Post an Item</h2>

@using (Html.BeginForm("Add", "Item", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Condition, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ItemCond",
                  new SelectList(Enum.GetValues(typeof(UCMMarketplace.Models.ItemCondition))),
                  "Select Condition",
                  new { @class = "form-control"})
                @Html.ValidationMessageFor(model => model.Condition, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CategoryList, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CategoryList", ViewBag.categoryname as SelectList, "Category Name", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryList, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImagePath, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" class="lifile" name="Imagefile" required multiple onchange="loadfile(event)" />
                <p style="color:darkcyan;">Please upload file of type ".jpg, .png, .jpeg"</p>
                @*@Html.EditorFor(model => model.ImagePath, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.ImagePath, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Add" class="btn btn-default" />
            </div>
        </div>
    </div>


}
<div>
    @Html.ActionLink("Home", "Index", "Home", null, null)

</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    var loadfile = function (event) {
        var files = event.target.files;
        for (var i = 0; i = files.length; i++) {
            $("dynamicimage").append < "img src='" + URL.createObjectURL(event.target.files[i] + "' class='dynamicimg'/><br> ");
        }
    }  
////get file path from client system
//function getNameFromPath(strFilepath) {
//    var objRE = new RegExp(/([^\/\\]+)$/);
//    var strName = objRE.exec(strFilepath);

//    if (strName == null) {
//        return null;
//    }
//    else {
//        return strName[0];
//    }
//}

//    $(function () {
//        $("#Imagefile").change(function () {
//            var file = getNameFromPath($(this).val());
//            if (file != null) {
//                var extension = file.substr((file.lastIndexOf('.') + 1));
//                switch (extension) {
//                    case 'jpg':
//                        flag = true;
//                        break;
//                    case 'png':
//                        flag = true;
//                        break;
//                    case 'jpeg':
//                        flag = true;
//                        break;
//                    default:
//                        flag = false;
//                }
//            }
//            if (flag == false) {
//                $(".lifile > span").text("You can upload only jpg,png,jpeg extension file");
//                return false;
//            }
           
//            else {
//                $(".lifile > span").text("");
//            }
//        }
//    });
//});

</script>